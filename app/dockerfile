# =================================================================
# Estágio 1: Build (Construção da Aplicação)
# Usamos uma imagem Maven com JDK 17 para compilar o projeto.
# 'AS builder' nomeia este estágio para referência futura.
# =================================================================
FROM maven:3.9-eclipse-temurin-17 AS builder

# Define o diretório de trabalho dentro do contêiner
WORKDIR /app

# Copia apenas o arquivo de definição do projeto primeiro
# Isso otimiza o cache do Docker. As dependências só serão baixadas novamente se o pom.xml mudar.
COPY pom.xml .
RUN mvn dependency:go-offline

# Copia todo o código-fonte do projeto
COPY src ./src

# Executa o build do Maven para gerar o arquivo .jar
# -DskipTests pula a execução dos testes para um build mais rápido no Docker
RUN mvn package -DskipTests

# =================================================================
# Estágio 2: Runtime (Execução da Aplicação)
# Usamos uma imagem mínima, apenas com o Java Runtime Environment (JRE).
# Isso torna a imagem final muito menor e mais segura.
# =================================================================
FROM eclipse-temurin:17-jre-alpine

# Define o diretório de trabalho
WORKDIR /app

# Cria um usuário e grupo não-root para executar a aplicação (Melhor prática de segurança)
RUN addgroup -S spring && adduser -S spring -G spring

# Define o usuário que irá executar a aplicação
USER spring:spring

# Copia o arquivo .jar gerado no estágio 'builder' para a imagem final
# Renomeamos para 'app.jar' para simplicidade
COPY --from=builder /app/target/*.jar app.jar

# Expõe a porta em que a aplicação Spring Boot roda
EXPOSE 8080

# Define o comando para iniciar a aplicação quando o contêiner for executado
ENTRYPOINT ["java", "-jar", "app.jar"]